Scala: Type-classes
======================================
Lance Gatlin <lance.gatlin@gmail.com>
v1,12-Jun-2014
:blogpost-status: unpublished
:blogpost-categories: scala

== What is a type-class?

A type-class is a type that is used to support "ad hoc" polymorphism. Type-classes allow adding types as members at any time, including after the original definition of the type. OOP type inheritance polymorphism requires knowing all possible desired instances of polymorphism to be known at design time. Additionally, users of type-class libraries can select specific implementations of a type-class for a particular type (or combination of types).

== An Extended Example

When I first read about type-classes, I found it difficult to understand what marginal value they added over classic OOP polymorphism. But overtime, I've grown to love type-classes. For me it took encountering the many painful refactorings that ultimately result from overuse of classic OOP polymorphism. Constant refactoring gets old quickly. I've built this example to help illustrate this idea.

In the code below, I've created a very basic inheritance structure for modeling the tools in my garage: 

[source,scala,numbered]
----
trait Tool
class Hammer extends Tool {
  def pound(something: Any) : Unit = ???
}
class Screwdriver extends Tool {
  def turn(something: Any) : Unit = ???
}
class Rake extends Tool {
  def turn(something: Any) : Unit = ???
}
----

Everything is straightforward, until the day that I can't find my hammer. I just have some finishing nails I need to hammer to finish my IKEA shelf, so I decide to use my favorite screwdriver "big bertha" to do some careful "pound"'ing. This works great, but now I have a problem. I have to refactor my code:

[source,scala,numbered]
----
trait Tool {
  def pound(something: Any) : Unit
}
class Hammer extends Tool {
  def pound(something: Any) : Unit = ???
}   
class Screwdriver extends Tool {
  def pound(something: Any) : Unit = ???
  def turn(something: Any) : Unit = ???
}
class Rake extends Tool {
  def pound(something: Any) : Unit = throw new UnsupportedOperationException
  def gather(something: Any) : Unit = ???
}
----

To model my new fact that Screwdrivers can also "pound", I've
